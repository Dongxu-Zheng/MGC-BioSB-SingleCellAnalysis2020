library(SingleCellExperiment)
packageVersion(SingleCellExperiment
)
packageVersion(SingleCellExperiment)
packageVersion("SingleCellExperiment")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
rm(list = ls())
BiocManager::install("SingleCellExperiment")
remove.packages("SingleCellExperiment")
BiocManager::install("SingleCellExperiment")
BiocManager::install("SingleCellExperiment")
packageVersion("SingleCellExperiment")
library(SingleCellExperiment)
packageVersion("SingleCellExperiment")
knitr::opts_chunk$set(echo = TRUE)
colLabels
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
# The following initializes usage of Bioc devel
BiocManager::install(version='devel')
BiocManager::install("SingleCellExperiment")
suppressMessages(require(Seurat))
suppressMessages(require(scran))
suppressMessages(require(BiocFileCache))
suppressMessages(require(DropletUtils))
suppressMessages(require(scater))
suppressMessages(require(EnsDb.Hsapiens.v86))
suppressMessages(require(SingleCellExperiment))
#--- loading ---#
bfc <- BiocFileCache("raw_data", ask = FALSE)
raw.path <- bfcrpath(bfc, file.path("http://cf.10xgenomics.com/samples",
"cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz"))
untar(raw.path, exdir=file.path(tempdir(), "pbmc4k"))
fname <- file.path(tempdir(), "pbmc4k/raw_gene_bc_matrices/GRCh38")
sce.pbmc <- read10xCounts(fname, col.names=TRUE)
#--- gene-annotation ---#
rownames(sce.pbmc) <- uniquifyFeatureNames(
rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol)
location <- mapIds(EnsDb.Hsapiens.v86, keys=rowData(sce.pbmc)$ID,
column="SEQNAME", keytype="GENEID")
#--- cell-detection ---#
set.seed(100)
e.out <- emptyDrops(counts(sce.pbmc))
sce.pbmc <- sce.pbmc[,which(e.out$FDR <= 0.001)]
#--- quality-control ---#
stats <- perCellQCMetrics(sce.pbmc, subsets=list(Mito=which(location=="MT")))
high.mito <- isOutlier(stats$subsets_Mito_percent, type="higher")
sce.pbmc <- sce.pbmc[,!high.mito]
#--- normalization ---#
set.seed(1000)
clusters <- quickCluster(sce.pbmc)
sce.pbmc <- computeSumFactors(sce.pbmc, cluster=clusters)
sce.pbmc <- logNormCounts(sce.pbmc)
#--- variance-modelling ---#
set.seed(1001)
dec.pbmc <- modelGeneVarByPoisson(sce.pbmc)
top.pbmc <- getTopHVGs(dec.pbmc, prop=0.1)
#--- dimensionality-reduction ---#
set.seed(10000)
sce.pbmc <- denoisePCA(sce.pbmc, subset.row=top.pbmc, technical=dec.pbmc)
set.seed(100000)
sce.pbmc <- runTSNE(sce.pbmc, dimred="PCA")
set.seed(1000000)
sce.pbmc <- runUMAP(sce.pbmc, dimred="PCA")
#--- clustering ---#
g <- buildSNNGraph(sce.pbmc, k=10, use.dimred = 'PCA')
clust <- igraph::cluster_walktrap(g)$membership
colLabels(sce.pbmc) <- factor(clust)
sce.pbmc$label
sce.pbmc$label <- factor(clust)
markers.pbmc <- findMarkers(sce.pbmc)
markers.pbmc <- findMarkers(sce.pbmc, groups=sce.pbmc$label)
markers.pbmc
chosen <- "9"
interesting <- markers.pbmc[[chosen]]
colnames(interesting)
interesting[1:10,1:4]
library(pheatmap)
best.set <- interesting[interesting$Top <= 6,]
logFCs <- getMarkerEffects(best.set)
require(scran)
logFCs <- getMarkerEffects(best.set)
packageVersion("scran")
getMarkerEffects <- function(x, prefix="logFC", strip=TRUE, remove.na.col=FALSE) {
regex <- paste0("^", prefix, "\\.")
i <- grep(regex, colnames(x))
out <- as.matrix(x[,i])
if (strip) {
colnames(out) <- sub(regex, "", colnames(out))
}
if (remove.na.col) {
out <- out[,!colAnyNAs(out),drop=FALSE]
}
out
}
logFCs <- getMarkerEffects(best.set)
pheatmap(logFCs, breaks=seq(-5, 5, length.out=101))
pbmc <- readRDS(file = "pbmc3k_final.rds")
rm(list = ls())
suppressMessages(require(Seurat))
pbmc <- readRDS(file = "pbmc3k_final.rds")
Idents(pbmc)
levels(pbmc)
levels(pbmc)
# Find differentially expressed features between CD14+ and FCGR3A+ Monocytes
monocyte.de.markers <- FindMarkers(pbmc, ident.1 = "CD14+ Mono", ident.2 = "FCGR3A+ Mono")
# view results
head(monocyte.de.markers)
# Test for DE features using the MAST package
head(FindMarkers(pbmc, ident.1 = "CD14+ Mono", ident.2 = "FCGR3A+ Mono", test.use = "MAST"))
install.packages("BiocManager") # Needed to install all Bioconductor packages
BiocManager::install("MAST")
install.packages("BiocManager") # Needed to install all Bioconductor packages
BiocManager::install("MAST")
knitr::opts_chunk$set(echo = TRUE)
# Test for DE features using the MAST package
head(FindMarkers(pbmc, ident.1 = "CD14+ Mono", ident.2 = "FCGR3A+ Mono", test.use = "MAST"))
suppressMessages(require(Seurat))
# Test for DE features using the MAST package
head(FindMarkers(pbmc, ident.1 = "CD14+ Mono", ident.2 = "FCGR3A+ Mono", test.use = "MAST"))
head(FindAllMarkers(pbmc, logfc.threshold = log(2)), min.pct = 0.5, min.diff.pct = 0.25))
head(FindAllMarkers(pbmc, logfc.threshold = log(2), min.pct = 0.5, min.diff.pct = 0.25))
pbmc.sce <- as.SingleCellExperiment(pbmc)
suppressMessages(require(scran))
markers.pbmc.up <- findMarkers(sce.pbmc, pval.type="all", direction="up")
markers.pbmc.up <- findMarkers(pbmc.sce, pval.type="all", direction="up")
pbmc.sce$ident
pbmc.sce$label <- pbmc.sce$ident
pbmc.sce$label <- pbmc.sce$ident
markers.pbmc.up <- findMarkers(pbmc.sce, pval.type="all", direction="up")
pbmc.sce$label <- pbmc.sce$ident
markers.pbmc.up <- findMarkers(pbmc.sce, pval.type="all", direction="up")
pbmc.sce <- as.SingleCellExperiment(pbmc)
markers.pbmc.up <- findMarkers(pbmc.sce, groups=sce.pbmc$ident, pval.type="all", direction="up")
markers.pbmc.up <- findMarkers(pbmc.sce, groups=pbmc.sce$ident, pval.type="all", direction="up")
levels(pbmc)
chosen <- "CD14+ Mono"
markers.pbmc <- findMarkers(pbmc.sce, groups=pbmc.sce$ident)
interesting <- markers.pbmc[[chosen]]
colnames(interesting)
interesting[1:10,1:4]
# suppressMessages(require(scater))
suppressMessages(require(pheatmap))
best.set <- interesting[interesting$Top <= 5,]
# Note: if you use scran v1.16, this is a built-in function
getMarkerEffects <- function(x, prefix="logFC", strip=TRUE, remove.na.col=FALSE) {
regex <- paste0("^", prefix, "\\.")
i <- grep(regex, colnames(x))
out <- as.matrix(x[,i])
if (strip) {
colnames(out) <- sub(regex, "", colnames(out))
}
if (remove.na.col) {
out <- out[,!colAnyNAs(out),drop=FALSE]
}
out
}
###
logFCs <- getMarkerEffects(best.set)
pheatmap(logFCs, breaks=seq(-5, 5, length.out=101))
best.set <- interesting[interesting$Top <= 10,]
# Note: if you use scran v1.16, this is a built-in function
getMarkerEffects <- function(x, prefix="logFC", strip=TRUE, remove.na.col=FALSE) {
regex <- paste0("^", prefix, "\\.")
i <- grep(regex, colnames(x))
out <- as.matrix(x[,i])
if (strip) {
colnames(out) <- sub(regex, "", colnames(out))
}
if (remove.na.col) {
out <- out[,!colAnyNAs(out),drop=FALSE]
}
out
}
###
logFCs <- getMarkerEffects(best.set)
pheatmap(logFCs, breaks=seq(-5, 5, length.out=101))
best.set <- interesting[interesting$Top <= 5,]
# Note: if you use scran v1.16, this is a built-in function
getMarkerEffects <- function(x, prefix="logFC", strip=TRUE, remove.na.col=FALSE) {
regex <- paste0("^", prefix, "\\.")
i <- grep(regex, colnames(x))
out <- as.matrix(x[,i])
if (strip) {
colnames(out) <- sub(regex, "", colnames(out))
}
if (remove.na.col) {
out <- out[,!colAnyNAs(out),drop=FALSE]
}
out
}
###
logFCs <- getMarkerEffects(best.set)
pheatmap(logFCs, breaks=seq(-5, 5, length.out=101))
library(scRNAseq)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("scRNAseq")
library(scRNAseq)
suppressMessages(require(BiocFileCache))
suppressMessages(require(DropletUtils))
suppressMessages(require(scRNAseq))
suppressMessages(require(EnsDb.Hsapiens.v86))
rm(list = ls())
#--- loading ---#
library(scRNAseq)
sce.lawlor <- LawlorPancreasData()
#--- gene-annotation ---#
library(AnnotationHub)
edb <- AnnotationHub()[["AH73881"]]
anno <- select(edb, keys=rownames(sce.lawlor), keytype="GENEID",
columns=c("SYMBOL", "SEQNAME"))
rowData(sce.lawlor) <- anno[match(rownames(sce.lawlor), anno[,1]),-1]
#--- quality-control ---#
library(scater)
stats <- perCellQCMetrics(sce.lawlor,
subsets=list(Mito=which(rowData(sce.lawlor)$SEQNAME=="MT")))
qc <- quickPerCellQC(stats, percent_subsets="subsets_Mito_percent",
batch=sce.lawlor$`islet unos id`)
sce.lawlor <- sce.lawlor[,!qc$discard]
#--- normalization ---#
library(scran)
set.seed(1000)
clusters <- quickCluster(sce.lawlor)
sce.lawlor <- computeSumFactors(sce.lawlor, clusters=clusters)
sce.lawlor <- logNormCounts(sce.lawlor)
saveRDS(sce.lawlor, file = "sce.lawlor.rds")
getwd()
readRDS(file = "sce.lawlor.rds")
marker.lawlor.t <- findMarkers(sce.lawlor, groups=sce.lawlor$`cell type`,
direction="up", restrict=c("Alpha", "Gamma/PP"))
marker.lawlor.w <- findMarkers(sce.lawlor, groups=sce.lawlor$`cell type`,
direction="up", restrict=c("Alpha", "Gamma/PP"), test.type="wilcox")
marker.alpha.t <- marker.lawlor.t$Alpha
marker.alpha.w <- marker.lawlor.w$Alpha
chosen.alpha.t <- rownames(marker.alpha.t)[1:20]
chosen.alpha.w <- rownames(marker.alpha.w)[1:20]
u.alpha.t <- setdiff(chosen.alpha.t, chosen.alpha.w)
u.alpha.w <- setdiff(chosen.alpha.w, chosen.alpha.t)
# Upregulated in gamma:
marker.gamma.t <- marker.lawlor.t$`Gamma/PP`
marker.gamma.w <- marker.lawlor.w$`Gamma/PP`
chosen.gamma.t <- rownames(marker.gamma.t)[1:20]
chosen.gamma.w <- rownames(marker.gamma.w)[1:20]
u.gamma.t <- setdiff(chosen.gamma.t, chosen.gamma.w)
u.gamma.w <- setdiff(chosen.gamma.w, chosen.gamma.t)
subset <- sce.lawlor[,sce.lawlor$`cell type` %in% c("Alpha", "Gamma/PP")]
gridExtra::grid.arrange(
plotExpression(subset, x="cell type", features=u.alpha.t, ncol=2) +
ggtitle("Upregulated in alpha, t-test-only"),
plotExpression(subset, x="cell type", features=u.alpha.w, ncol=2) +
ggtitle("Upregulated in alpha, WMW-test-only"),
plotExpression(subset, x="cell type", features=u.gamma.t, ncol=2) +
ggtitle("Upregulated in gamma, t-test-only"),
plotExpression(subset, x="cell type", features=u.gamma.w, ncol=2) +
ggtitle("Upregulated in gamma, WMW-test-only"),
ncol=2
)
readRDS(file = "sce.lawlor.rds")
marker.lawlor.t <- findMarkers(sce.lawlor, groups=sce.lawlor$`cell type`,
direction="up", restrict=c("Alpha", "Gamma/PP"))
marker.lawlor.w <- findMarkers(sce.lawlor, groups=sce.lawlor$`cell type`,
direction="up", restrict=c("Alpha", "Gamma/PP"), test.type="wilcox")
# Upregulated in alpha:
marker.alpha.t <- marker.lawlor.t$Alpha
marker.alpha.w <- marker.lawlor.w$Alpha
chosen.alpha.t <- rownames(marker.alpha.t)[1:20]
chosen.alpha.w <- rownames(marker.alpha.w)[1:20]
u.alpha.t <- setdiff(chosen.alpha.t, chosen.alpha.w)
u.alpha.w <- setdiff(chosen.alpha.w, chosen.alpha.t)
# Upregulated in gamma:
marker.gamma.t <- marker.lawlor.t$`Gamma/PP`
marker.gamma.w <- marker.lawlor.w$`Gamma/PP`
chosen.gamma.t <- rownames(marker.gamma.t)[1:20]
chosen.gamma.w <- rownames(marker.gamma.w)[1:20]
u.gamma.t <- setdiff(chosen.gamma.t, chosen.gamma.w)
u.gamma.w <- setdiff(chosen.gamma.w, chosen.gamma.t)
# Examining all uniquely detected markers in each direction.
subset <- sce.lawlor[,sce.lawlor$`cell type` %in% c("Alpha", "Gamma/PP")]
gridExtra::grid.arrange(
plotExpression(subset, x="cell type", features=u.alpha.t, ncol=2) +
ggtitle("Upregulated in alpha, t-test-only"),
plotExpression(subset, x="cell type", features=u.alpha.w, ncol=2) +
ggtitle("Upregulated in alpha, WMW-test-only"),
plotExpression(subset, x="cell type", features=u.gamma.t, ncol=2) +
ggtitle("Upregulated in gamma, t-test-only"),
plotExpression(subset, x="cell type", features=u.gamma.w, ncol=2) +
ggtitle("Upregulated in gamma, WMW-test-only"),
ncol=2
)
# Examining all uniquely detected markers in each direction.
subset <- sce.lawlor[,sce.lawlor$`cell type` %in% c("Alpha", "Gamma/PP")]
gridExtra::grid.arrange(
plotExpression(subset, x="cell type", features=u.alpha.t, ncol=2) +
ggtitle("Upregulated in alpha, t-test-only"),
plotExpression(subset, x="cell type", features=u.alpha.w, ncol=2) +
ggtitle("Upregulated in alpha, WMW-test-only"),
plotExpression(subset, x="cell type", features=u.gamma.t, ncol=2) +
ggtitle("Upregulated in gamma, t-test-only"),
plotExpression(subset, x="cell type", features=u.gamma.w, ncol=2) +
ggtitle("Upregulated in gamma, WMW-test-only"),
ncol=2
)
readRDS(file = "sce.lawlor.rds")
marker.lawlor.t <- findMarkers(sce.lawlor, groups=sce.lawlor$`cell type`,
direction="up", restrict=c("Alpha", "Gamma/PP"))
marker.lawlor.w <- findMarkers(sce.lawlor, groups=sce.lawlor$`cell type`,
direction="up", restrict=c("Alpha", "Gamma/PP"), test.type="wilcox")
# Upregulated in alpha:
marker.alpha.t <- marker.lawlor.t$Alpha
marker.alpha.w <- marker.lawlor.w$Alpha
chosen.alpha.t <- rownames(marker.alpha.t)[1:20]
chosen.alpha.w <- rownames(marker.alpha.w)[1:20]
u.alpha.t <- setdiff(chosen.alpha.t, chosen.alpha.w)
u.alpha.w <- setdiff(chosen.alpha.w, chosen.alpha.t)
# Upregulated in gamma:
marker.gamma.t <- marker.lawlor.t$`Gamma/PP`
marker.gamma.w <- marker.lawlor.w$`Gamma/PP`
chosen.gamma.t <- rownames(marker.gamma.t)[1:20]
chosen.gamma.w <- rownames(marker.gamma.w)[1:20]
u.gamma.t <- setdiff(chosen.gamma.t, chosen.gamma.w)
u.gamma.w <- setdiff(chosen.gamma.w, chosen.gamma.t)
# Examining all uniquely detected markers in each direction.
subset <- sce.lawlor[,sce.lawlor$`cell type` %in% c("Alpha", "Gamma/PP")]
gridExtra::grid.arrange(
plotExpression(subset, x="cell type", features=u.alpha.t, ncol=2) +
ggtitle("Upregulated in alpha, t-test-only"),
plotExpression(subset, x="cell type", features=u.alpha.w, ncol=2) +
ggtitle("Upregulated in alpha, WMW-test-only"),
plotExpression(subset, x="cell type", features=u.gamma.t, ncol=2) +
ggtitle("Upregulated in gamma, t-test-only"),
plotExpression(subset, x="cell type", features=u.gamma.w, ncol=2) +
ggtitle("Upregulated in gamma, WMW-test-only"),
ncol=2
)
readRDS(file = "sce.lawlor.rds")
marker.lawlor.t <- findMarkers(sce.lawlor, groups=sce.lawlor$`cell type`,
direction="up", restrict=c("Alpha", "Gamma/PP"))
marker.lawlor.w <- findMarkers(sce.lawlor, groups=sce.lawlor$`cell type`,
direction="up", restrict=c("Alpha", "Gamma/PP"), test.type="wilcox")
# Upregulated in alpha:
marker.alpha.t <- marker.lawlor.t$Alpha
marker.alpha.w <- marker.lawlor.w$Alpha
chosen.alpha.t <- rownames(marker.alpha.t)[1:5]
chosen.alpha.w <- rownames(marker.alpha.w)[1:5]
u.alpha.t <- setdiff(chosen.alpha.t, chosen.alpha.w)
u.alpha.w <- setdiff(chosen.alpha.w, chosen.alpha.t)
# Upregulated in gamma:
marker.gamma.t <- marker.lawlor.t$`Gamma/PP`
marker.gamma.w <- marker.lawlor.w$`Gamma/PP`
chosen.gamma.t <- rownames(marker.gamma.t)[1:5]
chosen.gamma.w <- rownames(marker.gamma.w)[1:5]
u.gamma.t <- setdiff(chosen.gamma.t, chosen.gamma.w)
u.gamma.w <- setdiff(chosen.gamma.w, chosen.gamma.t)
# Examining all uniquely detected markers in each direction.
subset <- sce.lawlor[,sce.lawlor$`cell type` %in% c("Alpha", "Gamma/PP")]
gridExtra::grid.arrange(
plotExpression(subset, x="cell type", features=u.alpha.t, ncol=2) +
ggtitle("Upregulated in alpha, t-test-only"),
plotExpression(subset, x="cell type", features=u.alpha.w, ncol=2) +
ggtitle("Upregulated in alpha, WMW-test-only"),
plotExpression(subset, x="cell type", features=u.gamma.t, ncol=2) +
ggtitle("Upregulated in gamma, t-test-only"),
plotExpression(subset, x="cell type", features=u.gamma.w, ncol=2) +
ggtitle("Upregulated in gamma, WMW-test-only"),
ncol=2
)
markers.pbmc.binom <- findMarkers(pbmc.sce, test="binom", direction="up")
pbmc <- readRDS(file = "pbmc3k_final.rds")
pbmc.sce <- as.SingleCellExperiment(pbmc)
markers.pbmc.binom <- findMarkers(pbmc.sce, test="binom", direction="up")
markers.pbmc.binom <- findMarkers(pbmc.sce, groups = pbmc.sce$ident, test="binom", direction="up")
interesting.binom <- markers.pbmc.binom[[chosen]]
chosen <- "CD14+ Mono"
markers.pbmc.binom <- findMarkers(pbmc.sce, groups = pbmc.sce$ident, test="binom", direction="up")
interesting.binom <- markers.pbmc.binom[[chosen]]
top.genes <- head(rownames(interesting.binom))
plotExpression(sce.pbmc, x="label", features=top.genes)
plotExpression(pbmc.sce, x="label", features=top.genes)
plotExpression(pbmc.sce, x="ident", features=top.genes)
levels(pbmc)
chosen -< "CD8 T"
chosen <- "CD8 T"
interesting.binom <- markers.pbmc.binom[[chosen]]
top.genes <- head(rownames(interesting.binom))
plotExpression(pbmc.sce, x="ident", features=top.genes)
chosen <- "DC"
interesting.binom <- markers.pbmc.binom[[chosen]]
top.genes <- head(rownames(interesting.binom))
plotExpression(pbmc.sce, x="ident", features=top.genes)
levels(pbmc)
chosen <- "Naive CD4 T"
interesting.binom <- markers.pbmc.binom[[chosen]]
top.genes <- head(rownames(interesting.binom))
plotExpression(pbmc.sce, x="ident", features=top.genes)
chosen <- "B"
interesting.binom <- markers.pbmc.binom[[chosen]]
top.genes <- head(rownames(interesting.binom))
plotExpression(pbmc.sce, x="ident", features=top.genes)
plotExpression(sce.lawlor, x="cell type", features="ENSG00000115263")
chosen <- "CD14+ Mono"
interesting.binom <- markers.pbmc.binom[[chosen]]
top.genes <- head(rownames(interesting.binom))
plotExpression(pbmc.sce, x="ident", features=top.genes)
plotExpression(sce.lawlor, x="cell type", features="ENSG00000115263")
readRDS(file = "sce.lawlor.rds")
markers.pbmc.binom.pancreas <- findMarkers(sce.lawlor, groups = sce.lawlor$`cell type`, test="binom", direction="up")
levels(sce.lawlor$`cell type`)
sce.lawlor$`cell type`
interesting.binom <- markers.pbmc.binom.pancreas[[chosen]]
top.genes <- head(rownames(interesting.binom))
plotExpression(sce.lawlor, x="cell type", features=top.genes)
plotExpression(sce.lawlor, x="cell type", features="ENSG00000115263")
top.genes
top.genes <- head(rownames(interesting.binom))
markers.pbmc.binom.pancreas <- findMarkers(sce.lawlor, groups = sce.lawlor$`cell type`, test="binom", direction="up")
markers.pbmc.binom.pancreas
interesting.binom <- markers.pbmc.binom.pancreas[[chosen]]
interesting.binom
markers.pbmc.binom.pancreas <- findMarkers(sce.lawlor, groups = sce.lawlor$`cell type`, direction="up")
chosen <- "Alpha"
interesting.binom <- markers.pbmc.binom.pancreas[[chosen]]
top.genes <- head(rownames(interesting.binom))
plotExpression(sce.lawlor, x="cell type", features=top.genes)
pancreas.data <- readRDS(file = "session-integration_files/pancreas_expression_matrix.rds")
setwd("C:/Users/amahfouz/Documents/GitHub/MGC-BioSB-SingleCellAnalysis2020")
getwd()
pancreas.data <- readRDS(file = "session-integration_files/pancreas_expression_matrix.rds")
pancreas.data <- readRDS(file = "../session-integration_files/pancreas_expression_matrix.rds")
pancreas.data <- readRDS(file = "../session-integration/session-integration_files/pancreas_expression_matrix.rds")
metadata <- readRDS(file = "../session-integration/session-integration_files/pancreas_metadata.rds")
pancreas <- CreateSeuratObject(pancreas.data, meta.data = metadata)
pancreas.sce <- as.SingleCellExperiment(pancreas)
?FindConservedMarkers
DefaultAssay(pancreas)
# here, we have not integrated the data so the default assay is "RNA", if you have integrated the data using Seurat, the default assay will be "Integrated". Make sure to switch it to "RNA" before performing DE analysis
# DefaultAssay(pancreas) <- "RNA"
levels(pancreas)
levels(pancreas)
Idents(pancreas)
head(pancreas@meta.data)
# here, we have not integrated the data so the default assay is "RNA", if you have integrated the data using Seurat, the default assay will be "Integrated". Make sure to switch it to "RNA" before performing DE analysis
# DefaultAssay(pancreas) <- "RNA"
Idents(pancreas) <- pancreas@meta.data$celltype
Idents(pancreas) <- pancreas@meta.data$celltype
levels(pancreas)
head(pancreas@meta.data)
levels(pancreas@meta.data$tech)
head(pancreas@meta.data)
summary(pancreas@meta.data$tech)
table(pancreas@meta.data$tech)
beta.markers <- FindConservedMarkers(pancreas, ident.1 = "beta", grouping.var = "tech", verbose = FALSE)
install.packages("metap")
library(metap)
library("metap")
install.packages("multtest")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("multtest")
install.packages("metap")
beta.markers <- FindConservedMarkers(pancreas, ident.1 = "beta", grouping.var = "tech", verbose = FALSE)
?FindMarkers
log(2)
beta.markers <- FindConservedMarkers(pancreas, ident.1 = "beta", grouping.var = "tech", verbose = FALSE,
logfc.threshold = log(2), min.pct = 0.25, min.diff.pct = 0.25)
head(nk.markers)
head(beta.markers)
head(beta.markers, n=10)
beta.markers <- FindConservedMarkers(pancreas, ident.1 = "alpha", grouping.var = "tech", verbose = FALSE,
logfc.threshold = log(2), min.pct = 0.25, min.diff.pct = 0.25)
beta.markers <- FindConservedMarkers(pancreas, ident.1 = "alpha", grouping.var = "tech", verbose = FALSE,
logfc.threshold = log(2), min.pct = 0.25, min.diff.pct = 0.25)
head(beta.markers, n=10)
beta.markers <- FindConservedMarkers(pancreas, ident.1 = "alpha", grouping.var = "tech", verbose = FALSE,
logfc.threshold = 0.1, min.pct = 0.25, min.diff.pct = 0.25)
beta.markers <- FindConservedMarkers(pancreas, ident.1 = "alpha", grouping.var = "tech", verbose = FALSE,
logfc.threshold = 0.1, min.pct = 0.25, min.diff.pct = 0.25)
head(beta.markers, n=10)
table(Idents(pancreas))
beta.markers <- FindConservedMarkers(pancreas, ident.1 = "delta", grouping.var = "tech", verbose = FALSE,
logfc.threshold = 0.1, min.pct = 0.25, min.diff.pct = 0.25)
beta.markers <- FindConservedMarkers(pancreas, ident.1 = "delta", grouping.var = "tech", verbose = FALSE,
logfc.threshold = 0.1, min.pct = 0.25, min.diff.pct = 0.25)
head(beta.markers, n=10)
head(beta.markers, n=10)
FeaturePlot(pancreas, features = c("BCHE", "GHSR", "FRZB", "CBLN4", min.cutoff = "q9")
)
m.out <- findMarkers(pancreas.sce, pancreas.sce$celltype, block=pancreas.sce$tech,
direction="up", lfc=1, row.data=rowData(pancreas.sce)[,3,drop=FALSE])
m.out <- findMarkers(pancreas.sce, pancreas.sce$celltype, block=pancreas.sce$tech,
direction="up", lfc=1, row.data=rowData(pancreas.sce)[,3,drop=FALSE])
head(rowData(pancreas.sce)
)
rowData(pancreas.sce)
m.out <- findMarkers(pancreas.sce, group = pancreas.sce$celltype, block = pancreas.sce$tech,
direction="up", lfc=1)
m.out
demo <- m.out[["beta"]]
as.data.frame(demo[1:20,c("Symbol", "Top", "p.value", "FDR")])
demo
as.data.frame(demo[1:20,c("Top", "p.value", "FDR")])
plotExpression(pancreas.sce, x=I(factor(pancreas.sce$celltype)),
features="INS", colour_by="batch") + facet_wrap(~colour_by)
plotExpression(pancreas.sce, x=I(factor(pancreas.sce$celltype)),
features="INS", colour_by="tech") + facet_wrap(~colour_by)
plotExpression(pancreas.sce, x=I(factor(pancreas.sce$celltype)),
features="FOXA2", colour_by="tech") + facet_wrap(~colour_by)
plotExpression(pancreas.sce, x=I(factor(pancreas.sce$celltype)),
features="INS", colour_by="tech") + facet_wrap(~colour_by)
rm(list = ls())
