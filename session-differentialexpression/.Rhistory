install.packages("pbkrtest")
source("http://app.tappAS.org/resources/downloads/tappAS_packages.R")
install.packages("vctrs")
install.packages("vctrs")
source("http://app.tappAS.org/resources/downloads/tappAS_packages.R")
rm(list = ls())
source("http://app.tappAS.org/resources/downloads/tappAS_packages.R")
pkg_bioc = c("DEXSeq","edgeR","NOISeq","goseq","mdgsa", "maSigPro")
pkg_cran = c("rlang","callr", "devtools","ggpubr","ggplot2","MASS","plyr","VennDiagram", "ggrepel","cowplot","tidyverse","UpSetR")
pkg_gthb = c("GOglm")
pkg_gthb_install = c("gu-mi/GOglm")
installation = FALSE
v = as.numeric(paste0(R.Version()$major, R.Version()$minor)) #36.6
v
if (length(setdiff(pkg_cran, rownames(installed.packages()))) > 0) {
install.packages(setdiff(pkg_cran, rownames(installed.packages())),repos = "https://cloud.r-project.org/")
}
if (length(setdiff(pkg_bioc, rownames(installed.packages()))) > 0) {
source("http://www.bioconductor.org/biocLite.R")
biocLite(setdiff(pkg_bioc, rownames(installed.packages())), suppressUpdates=TRUE)
}
if (length(setdiff(pkg_gthb, rownames(installed.packages()))) > 0) {
library(devtools)
devtools::install_github(setdiff(pkg_gthb_install, rownames(installed.packages())))
}
installation = TRUE
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(devtools)
install.packages("devtools")
library(devtools)
remove(list = ls())
install.packages("devtools")
library(devtools)
install_github("gu-mi/GOglm")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("geneLenDataBase")
install_github("gu-mi/GOglm")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("goseq")
install_github("gu-mi/GOglm")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("goseq")
rm(list = ls())
library(data.table)
library(dplyr)
library(magrittr)
library(ggplot2)
library(ggbeeswarm)
library(scales)
library(tidyr)
library(Seurat)
library(pheatmap)
library(ggthemes)
library(RColorBrewer)
library(ggridges)
library(utils)
library(cowplot)
analysisDir <- "C:/Users/amahfouz/surfdrive/Projects/Pleun_Bonn/new_15nov2019/Seurat_data/"
resDir <- "C:/Users/amahfouz/surfdrive/Projects/Pleun_Bonn/new_15nov2019/Results_AM/ALL_Tcells/"
load(file = paste0(analysisDir,"expr_filt.Robj"))
expr_filt_CD4 <- expr_filt
load(file = paste0(analysisDir,"expr_filt_CD8.Robj"))
expr_filt_CD8 <- expr_filt
rm(expr_filt)
sample_table <- read.delim(paste0(analysisDir,"samples.txt"), sep="", stringsAsFactors = T)
rownames(sample_table) <- sample_table$Library.number
colnames(sample_table)[1] <- c("ID")
sample_table$ID <- factor(sample_table$ID,levels = sample_table$ID)
sample_table$Ident <- factor(sample_table$Ident,levels = unique(sample_table$Ident))
sample_table$Sample <- factor(sample_table$Sample,levels = unique(sample_table$Sample))
seurat_CD4  <- CreateSeuratObject(counts = expr_filt_CD4,
min.cells = 5,
min.features = 250,
project = "CD4")
seurat_CD8  <- CreateSeuratObject(counts = expr_filt_CD8,
min.cells = 5,
min.features = 250,
project = "CD8")
seurat <- merge(seurat_CD4, y = seurat_CD8, add.cell.ids = c("CD4", "CD8"))
head(seurat@meta.data)
seurat[['compartment']] <- substr(rownames(seurat@meta.data), 1, 3)
# Add metadata
cellnames <- as.character(colnames(GetAssayData(object = seurat, slot = 'counts')))
library <- as.character(seurat$orig.ident)
cell_meta <- data.frame(cells = cellnames,
library = library,
row.names = cellnames)
IDX <- match(cell_meta$library, gsub("_",".",as.character(sample_table$ID)))
cell_meta$sample <- sample_table$Sample[IDX]
cell_meta$status <- sample_table$Status[IDX]
table(cell_meta$sample)
table(cell_meta$status)
seurat[['sample']] <- cell_meta$sample
seurat[['status']] <- cell_meta$status
### QC-----------------------------
### Mitochondrial genes
mito.features <- grep(pattern = "^MT", x = rownames(x = seurat), value = TRUE)
percent.mito <- Matrix::colSums(x = GetAssayData(object = seurat, slot = 'counts')[mito.features, ]) / Matrix::colSums(x = GetAssayData(object = seurat, slot = 'counts'))
# The [[ operator can add columns to object metadata, and is a great place to stash QC stats
seurat[['percent.mito']] <- percent.mito
VlnPlot(object = seurat, features = "nFeature_RNA") + NoLegend()
VlnPlot(object = seurat, features = "nCount_RNA") + NoLegend()
VlnPlot(object = seurat, features = "percent.mito")+ NoLegend()
#Filter cells based on quality scores (750 < Genes < 3000 , MT reads < 20%)
seurat <- subset(x = seurat, subset = nFeature_RNA > 750 & nFeature_RNA < 3000 & percent.mito < 0.20)
#Number of cells left after filtering
ncol(seurat)
# Filter potential erythrocytes
### Hemoglobin genes
Hb.features <- grep(pattern = "^HB", x = rownames(x = seurat), value = TRUE)
percent.Hb <- Matrix::colSums(x=GetAssayData(object=seurat,slot='counts')[Hb.features, ])/Matrix::colSums(x = GetAssayData(object=seurat,slot='counts'))
seurat[['percent.Hb']] <- percent.Hb
# VlnPlot(object = seurat, features = "percent.Hb") + NoLegend()
seurat <- subset(x = seurat, subset = percent.Hb < 0.0075)
ncol(seurat)
# ## remove plate 120----
# seurat <- subset(x = seurat, subset = sample %in% c("121", "122", "123", "124", "125", "126", "127", "128", "129", "130", "131"))
# table(seurat@meta.data$sample)
# dim(seurat)
## SCT------------
seurat <- SCTransform(seurat, vars.to.regress = c("percent.mito"), verbose = FALSE)
seurat <- RunPCA(seurat, verbose = FALSE)
ElbowPlot(seurat, ndims=50)
nDims <- 15
seurat <- RunTSNE(seurat, dims = 1:nDims, verbose = FALSE)
seurat <- RunUMAP(seurat, dims = 1:nDims, verbose = FALSE)
seurat <- FindNeighbors(seurat, dims = 1:nDims, verbose = FALSE)
seurat <- FindClusters(seurat, verbose = FALSE)
library(Seurat)
rm(list = ls())
library(ComplexHeatmap)
library(corrplot)
curr.dir <- "C:/Users/amahfouz/surfdrive/Projects/Maartje_Huijberts/"
ahba <- load(paste0(curr.dir, "Cushings_RData_Arlin"))
brainExprNorm <- sapply(brainExpr, function(x) t(scale(t(x))), simplify = FALSE) # Z-score expression across samples
regions <- c("subthalamus", "claustrum", "amygdala", "hippocampal formation", "epithalamus", "cingulate gyrus",
"thalamus", "insula", "parahippocampal gyrus", "temporal lobe", "frontal lobe", "globus pallidus",
"parietal lobe", "mesencephalon", "basal forebrain", "striatum", "myelencephalon", "occipital lobe",
"white matter", "hypothalamus", "pons", "cerebellum")
region_id <- sapply(regions, sample.ids, simplify = FALSE)
# samples per donor
region_id <- lapply(donorNames, function(d){
lapply(region_id, function(r){
e <- brainExprNorm[[d]]
intersect(r, colnames(e))
})
})
roi_size <- sapply(region_id, function(x)sapply(x, length))
expr <- lapply(donorNames, function(d){# expression per donor
e <- sapply(region_id[[d]], function(r){
e <- brainExprNorm[[d]][mg_genes, ]
if (length(r)>1){
apply(e[, r], 1, median)
}
else if (length(r)==1){
e[, r]
} else {
rep(NA, nrow(e))
}
})
})
expr <- apply(simplify2array(expr), c(1,2), function(x) median(x, na.rm = TRUE)) # median expression across donors
rownames(expr) <- entrezId2Name(rownames(expr))
expr <- t(expr)
row.names(probeExprNorm$donor9861)
# median expression of AGRN 208 in selected regions
iso_probe_id <- c("1025472", "1025471", "1025470", "1025469")
expr_AGRNiso <- lapply(donorNames, function(d){# expression per donor
e <- sapply(region_id[[d]], function(r){
e <- probeExprNorm[[d]][iso_probe_id, ]
if (length(r)>1){
apply(e[, r], 1, median)
}
else if (length(r)==1){
e[, r]
} else {
rep(NA, nrow(e))
}
})
})
expr_AGRNiso <- apply(simplify2array(expr_AGRNiso), c(1,2), function(x) median(x, na.rm = TRUE)) # median expression across donors
rownames(expr_AGRNiso) <- entrezId2Name(rownames(expr_AGRNiso))
expr_AGRNiso <- t(expr_AGRNiso)
expr_AGRN208 <- expr_AGRNiso[,2]
expr <- cbind(expr,expr_AGRN208)
colnames(expr)[9] <- "AGRN-208"
expr <- expr[,-2]
Heatmap(expr, cluster_rows = TRUE, cluster_columns = TRUE,
row_names_gp = gpar(fontsize = 8), row_names_side = "left",
heatmap_legend_param = list(title = "Z-score(expression)"), column_names_side = "top",
row_dend_side = "right", row_dend_width = unit(15, "mm"),
clustering_method_rows = "average", clustering_method_columns = "average", column_names_gp = gpar(fontsize = 8))
Heatmap(expr, cluster_rows = TRUE, cluster_columns = TRUE,
row_names_gp = gpar(fontsize = 8), row_names_side = "left",
heatmap_legend_param = list(title = "Z-score(expression)"), column_names_side = "top",
row_dend_side = "right", row_dend_width = unit(15, "mm"),
clustering_method_rows = "average", clustering_method_columns = "average", column_names_gp = gpar(fontsize = 8))
Heatmap(expr, cluster_rows = TRUE, cluster_columns = TRUE,
row_names_gp = gpar(fontsize = 8), row_names_side = "left",
heatmap_legend_param = list(title = "Z-score(expression)"), column_names_side = "top",
row_dend_side = "right", row_dend_width = unit(15, "mm"),
clustering_method_columns = "average", column_names_gp = gpar(fontsize = 8))
Heatmap(expr, cluster_rows = TRUE, cluster_columns = TRUE,
row_names_gp = gpar(fontsize = 8), row_names_side = "left",
heatmap_legend_param = list(title = "Z-score(expression)"), column_names_side = "top",
row_dend_side = "right", row_dend_width = unit(15, "mm"),
cluster_rows = FALSE, clustering_method_columns = "average", column_names_gp = gpar(fontsize = 8))
Heatmap(expr, cluster_rows = FALSE, cluster_columns = TRUE,
row_names_gp = gpar(fontsize = 8), row_names_side = "left",
heatmap_legend_param = list(title = "Z-score(expression)"), column_names_side = "top",
row_dend_side = "right", row_dend_width = unit(15, "mm"),
clustering_method_columns = "average", column_names_gp = gpar(fontsize = 8))
Heatmap(expr, cluster_rows = FALSE, cluster_columns = TRUE,
row_names_gp = gpar(fontsize = 8), row_names_side = "left",
heatmap_legend_param = list(title = "Z-score(expression)"), column_names_side = "top",
row_dend_side = "right", row_dend_width = unit(15, "mm"),
clustering_method_rows = "complete", clustering_method_columns = "average", column_names_gp = gpar(fontsize = 8))
Heatmap(expr, cluster_rows = TRUE, cluster_columns = TRUE,
row_names_gp = gpar(fontsize = 8), row_names_side = "left",
heatmap_legend_param = list(title = "Z-score(expression)"), column_names_side = "top",
row_dend_side = "right", row_dend_width = unit(15, "mm"),
clustering_method_rows = "complete", clustering_method_columns = "average", column_names_gp = gpar(fontsize = 8))
Heatmap(expr, cluster_rows = TRUE, cluster_columns = TRUE,
row_names_gp = gpar(fontsize = 8), row_names_side = "left",
heatmap_legend_param = list(title = "Z-score(expression)"), column_names_side = "top",
row_dend_side = "right", row_dend_width = unit(15, "mm"),
clustering_method_rows = "complete", clustering_method_columns = "complete", column_names_gp = gpar(fontsize = 8))
rm(list = ls())
#binomial distribution
dbinom(6,size=9,prob=0.5)
#binomial distribution
dbinom(6,size=9,prob=1)
#binomial distribution
dbinom(6,size=9,prob=0.9)
#binomial distribution
dbinom(6,size=9,prob=0.1)
#binomial distribution
dbinom(6,size=9,prob=0.5)
#binomial distribution
dbinom(6,size=9,prob=0.6)
#binomial distribution
dbinom(6,size=9,prob=0.7)
#binomial distribution
dbinom(6,size=9,prob=0.9)
#binomial distribution
dbinom(6,size=9,prob=0.8)
#binomial distribution
dbinom(6,size=9,prob=0.5)
#Grid approximation
# definegrid
p_grid <-seq(from=0,to=1,length.out=20)
# defineprior
prior <-rep(1,20)
# compute likelihood at each value in grid
likelihood <-dbinom(6,size=9,prob=p_grid)
likelihood
# compute product of likelihood and prior
unstd.posterior <-likelihood*prior
# standardize the posterior, so it sums to 1
posterior <-unstd.posterior/sum(unstd.posterior)
# plot posterior destribution
plot( p_grid,posterior,type="b",
xlab="probability ofwater",ylab="posteriorprobability")
mtext( "20points")
# plot posterior destribution
plot( p_grid,posterior,type="b",
xlab="probability of water",ylab="posterior probability")
mtext( "20points")
#Grid approximation
n.points <- 100
n.points <- 100
# definegrid
p_grid <-seq(from=0,to=1,length.out=n.points)
# defineprior
prior <-rep(1,n.points)
# compute likelihood at each value in grid
likelihood <-dbinom(6,size=9,prob=p_grid)
# compute product of likelihood and prior
unstd.posterior <-likelihood*prior
# standardize the posterior, so it sums to 1
posterior <-unstd.posterior/sum(unstd.posterior)
# plot posterior destribution
plot( p_grid,posterior,type="b",
xlab="probability of water",ylab="posterior probability")
mtext( "20points")
n.points <- 1000
# definegrid
p_grid <-seq(from=0,to=1,length.out=n.points)
# defineprior
prior <-rep(1,n.points)
# compute likelihood at each value in grid
likelihood <-dbinom(6,size=9,prob=p_grid)
# compute product of likelihood and prior
unstd.posterior <-likelihood*prior
# standardize the posterior, so it sums to 1
posterior <-unstd.posterior/sum(unstd.posterior)
# plot posterior destribution
plot( p_grid,posterior,type="b",
xlab="probability of water",ylab="posterior probability")
mtext( "20points")
n.points <- 5
# definegrid
p_grid <-seq(from=0,to=1,length.out=n.points)
# defineprior
prior <-rep(1,n.points)
# compute likelihood at each value in grid
likelihood <-dbinom(6,size=9,prob=p_grid)
# compute product of likelihood and prior
unstd.posterior <-likelihood*prior
# standardize the posterior, so it sums to 1
posterior <-unstd.posterior/sum(unstd.posterior)
# plot posterior destribution
plot( p_grid,posterior,type="b",
xlab="probability of water",ylab="posterior probability")
mtext( "20points")
mtext(paste0(npoints, "points"))
mtext(paste0(n.points, "points"))
plot( p_grid,posterior,type="b",
xlab="probability of water",ylab="posterior probability")
mtext(paste0(n.points, "points"))
library(rethinking)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
devtools::install_github("stan-dev/cmdstanr")
install_cmdstan()
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
devtools::install_github("stan-dev/cmdstanr")
install_cmdstan()
install.packages("cmdstanr", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
install_cmdstan()
cmdstan=TRUE
set_ulam_cmdstan(TRUE)
library(cmdstanr)
install_cmdstan()
cmdstan=TRUE
set_ulam_cmdstan(TRUE)
library(scran)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnsDb.Hsapiens.v86")
install.packages("XML")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("EnsDb.Hsapiens.v86")
knitr::opts_chunk$set(echo = TRUE)
library(EnsDb.Hsapiens.v86)
suppressMessages(require(Seurat))
suppressMessages(require(scran))
suppressMessages(require(BiocFileCache))
suppressMessages(require(DropletUtils))
suppressMessages(require(scater))
suppressMessages(require(EnsDb.Hsapiens.v86))
#--- loading ---#
bfc <- BiocFileCache("raw_data", ask = FALSE)
raw.path <- bfcrpath(bfc, file.path("http://cf.10xgenomics.com/samples",
"cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz"))
untar(raw.path, exdir=file.path(tempdir(), "pbmc4k"))
fname <- file.path(tempdir(), "pbmc4k/raw_gene_bc_matrices/GRCh38")
sce.pbmc <- read10xCounts(fname, col.names=TRUE)
#--- gene-annotation ---#
rownames(sce.pbmc) <- uniquifyFeatureNames(
rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol)
location <- mapIds(EnsDb.Hsapiens.v86, keys=rowData(sce.pbmc)$ID,
column="SEQNAME", keytype="GENEID")
#--- cell-detection ---#
set.seed(100)
e.out <- emptyDrops(counts(sce.pbmc))
sce.pbmc <- sce.pbmc[,which(e.out$FDR <= 0.001)]
#--- quality-control ---#
stats <- perCellQCMetrics(sce.pbmc, subsets=list(Mito=which(location=="MT")))
high.mito <- isOutlier(stats$subsets_Mito_percent, type="higher")
sce.pbmc <- sce.pbmc[,!high.mito]
#--- normalization ---#
set.seed(1000)
clusters <- quickCluster(sce.pbmc)
sce.pbmc <- computeSumFactors(sce.pbmc, cluster=clusters)
sce.pbmc <- logNormCounts(sce.pbmc)
#--- variance-modelling ---#
set.seed(1001)
dec.pbmc <- modelGeneVarByPoisson(sce.pbmc)
top.pbmc <- getTopHVGs(dec.pbmc, prop=0.1)
#--- dimensionality-reduction ---#
set.seed(10000)
sce.pbmc <- denoisePCA(sce.pbmc, subset.row=top.pbmc, technical=dec.pbmc)
set.seed(100000)
sce.pbmc <- runTSNE(sce.pbmc, dimred="PCA")
set.seed(1000000)
sce.pbmc <- runUMAP(sce.pbmc, dimred="PCA")
#--- clustering ---#
g <- buildSNNGraph(sce.pbmc, k=10, use.dimred = 'PCA')
clust <- igraph::cluster_walktrap(g)$membership
colLabels(sce.pbmc) <- factor(clust)
sce.pbmc
colLabels(sce.pbmc)
sce.pbmc
markers.pbmc <- findMarkers(sce.pbmc)
library(SingleCellExperiment)
colLabels(sce.pbmc) <- factor(clust)
packageVersion("SingleCellExperiment")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
rm(list=ls())
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(require(SingleCellExperiment))
suppressMessages(require(Seurat))
suppressMessages(require(scran))
suppressMessages(require(BiocFileCache))
suppressMessages(require(DropletUtils))
suppressMessages(require(scater))
suppressMessages(require(EnsDb.Hsapiens.v86))
suppressMessages(require(SingleCellExperiment))
packageVersion(SingleCellExperiment())
packageVersion(SingleCellExperiment
)
packageVersion(SingleCellExperiment)
packageVersion(SingleCellExperiment())
packageVersion(SingleCellExperiment
)
sessionInfo()
require(SingleCellExperiment)
#--- loading ---#
bfc <- BiocFileCache("raw_data", ask = FALSE)
raw.path <- bfcrpath(bfc, file.path("http://cf.10xgenomics.com/samples",
"cell-exp/2.1.0/pbmc4k/pbmc4k_raw_gene_bc_matrices.tar.gz"))
untar(raw.path, exdir=file.path(tempdir(), "pbmc4k"))
fname <- file.path(tempdir(), "pbmc4k/raw_gene_bc_matrices/GRCh38")
sce.pbmc <- read10xCounts(fname, col.names=TRUE)
#--- gene-annotation ---#
rownames(sce.pbmc) <- uniquifyFeatureNames(
rowData(sce.pbmc)$ID, rowData(sce.pbmc)$Symbol)
location <- mapIds(EnsDb.Hsapiens.v86, keys=rowData(sce.pbmc)$ID,
column="SEQNAME", keytype="GENEID")
#--- cell-detection ---#
set.seed(100)
e.out <- emptyDrops(counts(sce.pbmc))
sce.pbmc <- sce.pbmc[,which(e.out$FDR <= 0.001)]
#--- quality-control ---#
stats <- perCellQCMetrics(sce.pbmc, subsets=list(Mito=which(location=="MT")))
high.mito <- isOutlier(stats$subsets_Mito_percent, type="higher")
sce.pbmc <- sce.pbmc[,!high.mito]
#--- normalization ---#
set.seed(1000)
clusters <- quickCluster(sce.pbmc)
sce.pbmc <- computeSumFactors(sce.pbmc, cluster=clusters)
sce.pbmc <- logNormCounts(sce.pbmc)
#--- variance-modelling ---#
set.seed(1001)
dec.pbmc <- modelGeneVarByPoisson(sce.pbmc)
top.pbmc <- getTopHVGs(dec.pbmc, prop=0.1)
#--- dimensionality-reduction ---#
set.seed(10000)
sce.pbmc <- denoisePCA(sce.pbmc, subset.row=top.pbmc, technical=dec.pbmc)
set.seed(100000)
sce.pbmc <- runTSNE(sce.pbmc, dimred="PCA")
set.seed(1000000)
sce.pbmc <- runUMAP(sce.pbmc, dimred="PCA")
#--- clustering ---#
g <- buildSNNGraph(sce.pbmc, k=10, use.dimred = 'PCA')
clust <- igraph::cluster_walktrap(g)$membership
colLabels(sce.pbmc) <- factor(clust)
library(SingleCellExperiment)
packageVersion(SingleCellExperiment)
knitr::opts_chunk$set(echo = TRUE)
require(SingleCellExperiment)
packageVersion("SingleCellExperiment")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("SingleCellExperiment")
getwd()
setwd(C:/Users/amahfouz/Documents/GitHub/MGC-BioSB-SingleCellAnalysis2020)
setwd(C:/Users/amahfouz/Documents/GitHub/MGC-BioSB-SingleCellAnalysis2020)
setwd("C:/Users/amahfouz/Documents/GitHub/MGC-BioSB-SingleCellAnalysis2020")
knitr::opts_chunk$set(echo = TRUE)
pbmc <- readRDS(file = "../session-differentialexpression/pbmc3k_final.rds")
pbmc <- readRDS(file = "../session-differentialexpression/pbmc3k_final.rds")
sce.lawlor <- readRDS(file = "../session-differentialexpression/sce_lawlor.rds")
rm(list = ls())
getwd()
pbmc <- readRDS(file = "../session-differentialexpression/pbmc3k_final.rds")
getwd()
pbmc <- readRDS(file = "../session-differentialexpression/pbmc3k_final.rds")
pbmc <- readRDS(file = "pbmc3k_final.rds")
pbmc <- readRDS(file = "../session-differentialexpression/pbmc3k_final.rds")
setwd("C:/Users/amahfouz/Documents")
pbmc <- readRDS(file = "pbmc3k_final.rds")
setwd("C:/Users/amahfouz/Documents/GitHub/MGC-BioSB-SingleCellAnalysis2020/session-differentialexpression")
pbmc <- readRDS(file = "pbmc3k_final.rds")
unlink('Differential_Expression_cache', recursive = TRUE)
getwd()
unlink('Differential_Expression_cache', recursive = TRUE)
getwd()
pbmc <- readRDS(file = "pbmc3k_final.rds")
getwd()
